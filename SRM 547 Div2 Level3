class RelativelyPrimeSubset {
public:
  bool is_prime(int n){
		if(n == 2) return true;
		if(n % 2 == 0) return false;

		for(int i = 3;i <= n / i;i += 2)
			if(n % i == 0) return false;

		return true;
	}

	int factors[50];
	int memo[50][(1 << 15)];

	int solve(int pos, int mask){
		if(pos == -1) return 0;

		int &ret = memo[pos][mask];

		if(ret == -1){
			if((mask & factors[pos]) == 0) ret = max(solve(pos - 1,mask),1 + solve(pos - 1,mask | factors[pos]));
			else ret = solve(pos - 1,mask);
		}

		return ret;
	}

	int findSize(vector <int> S) {
		int n = S.size();
		int p[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47};
		int ind[48];

		for(int i = 0;i < 15;++i)
			ind[ p[i] ] = i;

		for(int i = 0;i < n;++i){
			if(!(S[i] > 50 && is_prime(S[i]))){
				int aux = S[i];

				for(int j = 2;j <= aux;++j){
					if(aux % j == 0){
						while(aux % j == 0) aux /= j;
						factors[i] |= (1 << ind[j]);
					}
				}
			}
		}

		memset(memo,-1,sizeof memo);

		return solve(n - 1,0);
	}
};
